package com.sia.scheduler.log.jobfile;import ch.qos.logback.classic.Logger;import ch.qos.logback.classic.LoggerContext;import ch.qos.logback.classic.encoder.PatternLayoutEncoder;import ch.qos.logback.core.rolling.RollingFileAppender;import ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy;import ch.qos.logback.core.util.FileSize;import ch.qos.logback.core.util.OptionHelper;import com.sia.scheduler.util.constant.Constants;import org.slf4j.LoggerFactory;import java.util.HashMap;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;/** * @version V1.0.0 * @author: XSL * @description:JOB调度日志落盘 * @create: 2019-11-08 16:36 * @see **/public class LoggerBuilder {    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(LoggerBuilder.class);    private static final Map<String, Logger> LoggerPool = new HashMap<>();    public static Logger getLogger(String name) {        Logger logger = LoggerPool.get(name);        if (logger != null) {            return logger;        }        synchronized (LoggerBuilder.class) {            if (logger != null) {                return logger;            }            logger = build(name);            LoggerPool.put(name, logger);        }        return logger;    }    private static Logger build(String name) {        LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();        Logger logger = context.getLogger("FILE-" + name);        logger.setAdditive(false);        RollingFileAppender appender = new RollingFileAppender();        appender.setContext(context);        appender.setName("FILE-" + name);        appender.setFile(OptionHelper.substVars("./logs/joblog/job-log-" + name + ".log", context));        appender.setAppend(true);        appender.setPrudent(false);        SizeAndTimeBasedRollingPolicy policy = new SizeAndTimeBasedRollingPolicy();        String fp = OptionHelper.substVars("./logs/joblog/job-log-" + name + ".log.%d{yyyy-MM-dd}.%i.log.gz", context);        policy.setMaxFileSize(FileSize.valueOf("100MB"));        policy.setFileNamePattern(fp);        policy.setMaxHistory(180);        policy.setTotalSizeCap(FileSize.valueOf("32GB"));        policy.setParent(appender);        policy.setContext(context);        policy.start();        PatternLayoutEncoder encoder = new PatternLayoutEncoder();        encoder.setContext(context);        encoder.setPattern("%d{yyyy-MM-dd/HH:mm:ss.SSS}|%X{localIp}|[%t] %-5level %logger{50} %line - %m%n");        encoder.start();        appender.setRollingPolicy(policy);        appender.setEncoder(encoder);        appender.start();        logger.addAppender(appender);        return logger;    }    public static void releaseLogger(String jobKey) {        LOGGER.info(Constants.LOG_PREFIX + "Job stop, release logger,job is {}", jobKey);        if (LoggerPool.containsKey(jobKey)) {            LoggerPool.remove(jobKey);        }    }}